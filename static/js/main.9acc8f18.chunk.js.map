{"version":3,"sources":["components/NavBar.jsx","components/Layout.jsx","components/SkillCompareTable.jsx","components/PerkCompareTable.jsx","components/LanguageCompareTable.jsx","components/GuildPicker.jsx","components/GuildCompare.jsx","components/SkillPicker.jsx","theme.js","App.jsx","serviceWorker.js","index.js"],"names":["useState","React","withRouter","withStyles","theme","appBar","appTitle","paddingRight","breakpoints","down","fontSize","link","textDecoration","color","opacity","fontWeight","margin","padding","sideNavLink","horizontalNavLinks","display","menuButton","width","up","activeLink","appBarContainer","flexDirection","classes","drawerOpen","setDrawerOpen","navLinks","to","label","HorizonalNavLinks","map","className","activeClassName","exact","Button","SideNavLinks","ListItem","key","Drawer","open","onClose","List","AppBar","position","IconButton","hidden-lg","aria-label","edge","onClick","Toolbar","Typography","variant","layout","backgroundColor","palette","background","default","overflow","contentWrapper","maxWidth","children","Grid","container","item","xs","SkillCompareTable","skillKey","Object","keys","data","skills","group","foundSkill","find","k","extended","sk","guildGroup","gSelected","branchesFromSk","branching","this","findGroupAndLabel","proficiency","result","gNumber","proficiencyKey","forEach","findBranchesFrom","props","g1Key","g2Key","g1Value","g2Value","proficiencies","i","skillsToObj","g1Label","g2Label","mungedSkills","mungeSkills","Paper","square","elevation","m","root","Table","table","TableHead","TableRow","TableCell","cell","TableBody","skillGroups","skillGroup","titleCell","values","row","id","style","Tooltip","disableFocusListener","disableTouchListener","title","Chip","chip","Component","textTransform","marginLeft","height","marginTop","paddingLeft","content","PerkCompareTable","perks","prk","perksToObj","mungedPerks","mungePerks","length","noContent","component","scope","textAlign","LanguageCompareTable","languages","lng","languagesToObj","mungedLanguages","mungeLanguages","GuildPicker","state","guild","subguild","toggleSelection","event","setState","target","name","value","newQuery","queryString","stringify","history","location","pathname","push","search","parse","guilds","subguilds","tableConfig","justify","spacing","sm","FormHelperText","FormControl","formControl","Select","onChange","inputProps","sortedguilds","gKey","MenuItem","karma","href","documentation","select","sortedsubguilds","lg","flexGrow","marginRight","primary","main","GuildCompare","guild1","guild2","SkillPicker","selectedSkills","flattenGuild","skillPrefix","profLevel","skill","itemIndex","indexOf","splice","clearSelection","findGuildsForSkills","skillsMatched","includes","karmaLabel","linkTo","sectionTitle","selectedCount","size","clearSelected","skillGroupTitle","chipContainer","guildCombination","guildOption","guildOptionLink","guildOptionText","float","createMuiTheme","themeOverrides","App","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9acc8f18.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { NavLink } from \"react-router-dom\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { withRouter } from \"react-router\";\n\nconst { useState } = React;\n\nconst styles = (theme) => ({\n  appBar: {\n    ...theme.appBar\n  },\n  appTitle: {\n    paddingRight: 32,\n    [theme.breakpoints.down('xs')]: {\n      fontSize: 12,\n      paddingRight: 12,\n    }\n  },\n  link: {\n    textDecoration: 'none',\n    color: 'inherit',\n    opacity: 0.69,\n    '&>button': {\n      fontWeight: 600,\n      margin: '0 4px',\n      padding: '4px',\n    },\n  },\n  sideNavLink: {\n    textDecoration: 'none',\n    '&>button > span': {\n      color: 'white',\n      [theme.breakpoints.down('sm')]: {\n        fontSize: 10,\n      }\n    },\n  },\n  horizontalNavLinks: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    }\n  },\n  menuButton: {\n    width: 64,\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    }\n  },\n  activeLink: {\n    opacity: 1,\n  },\n  appBarContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n});\n\nconst NavBar = ({\n  classes,\n}) => {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const navLinks = [\n    {\n      to: '/arma-guild-picker/',\n      label: 'Guild Picker'\n    },\n    {\n      to: '/arma-guild-picker/guild-compare/',\n      label: 'Guild Compare'\n    },\n    {\n      to: '/arma-guild-picker/skill-picker/',\n      label: 'Skill Picker'\n    },\n  ];\n\n  const HorizonalNavLinks = navLinks.map(({to, label}) => (\n    <NavLink to={to} className={classes.link} activeClassName={classes.activeLink} exact>\n      <Button color=\"inherit\">\n        {label}\n      </Button>\n    </NavLink>\n  ));\n\n  const SideNavLinks = navLinks.map(({to, label}) => (\n    <ListItem key={to}>\n      <NavLink to={to} className={classes.sideNavLink} activeClassName={classes.activeLink} exact>\n        <Button color=\"inherit\">\n          {label}\n        </Button>\n      </NavLink>\n    </ListItem>\n  ));\n\n  return(\n    <>\n      <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n        <List>\n          {SideNavLinks}\n        </List>\n      </Drawer>\n      <AppBar position=\"static\">\n        <div className={classes.appBarContainer}>\n          <IconButton\n            className={classes.menuButton}\n            hidden-lg={true}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={() => setDrawerOpen(!drawerOpen)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Toolbar className={classes.appBar}>\n            <Typography className={classes.appTitle} variant=\"title\" color=\"inherit\">\n              Armageddon MUD Skills & Guilds\n            </Typography>\n            <div className={classes.horizontalNavLinks}>\n              {HorizonalNavLinks}\n            </div>\n          </Toolbar>\n        </div>\n      </AppBar>\n    </>\n  )\n}\nexport default withRouter(withStyles(styles)(NavBar));\n","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport NavBar from './NavBar'\nimport Grid from '@material-ui/core/Grid';\n\nconst styles = (theme) => ({\n  layout: {\n    backgroundColor: theme.palette.background.default,\n    overflow: 'hidden'\n  },\n  contentWrapper: {\n    [theme.breakpoints.down('lg')]: {\n      maxWidth: 1100,\n      margin: '0 auto'\n    }\n  }\n});\nconst Layout = ({\n  theme,\n  children,\n  classes,\n}) => {\n  return(\n    <Grid container className={classes.layout}>\n      <Grid item xs={12}>\n        <NavBar />\n      </Grid>\n      <Grid item xs={12}>\n        <div className={classes.contentWrapper}>\n          {children}\n        </div>\n      </Grid>\n    </Grid>\n  )\n}\nexport default withStyles(styles)(Layout);\n","import React, { Component }from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport data from '../data/data.json'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst styles = (theme) => ({\n  cell: {\n    width: '25%',\n    [theme.breakpoints.down('xs')]: {\n      padding: 4,\n      fontSize: '0.65rem',\n      maxWidth: 65,\n      paddingRight: '4px !important'\n    },\n    padding: 8,\n  },\n  titleCell: {\n    textTransform: 'capitalize',\n    padding: 8,\n    backgroundColor: '#aaaaaa21',\n    [theme.breakpoints.down('xs')]: {\n      padding: 4,\n      fontSize: '0.65rem',\n      maxWidth: 65,\n      paddingRight: '4px !important'\n    },\n  },\n  chip: {\n    backgroundColor: 'rgb(48, 48, 48)',\n    fontSize: 8,\n    marginLeft: 8,\n    padding: 2,\n    height: 16,\n    marginTop: -1,\n    [theme.breakpoints.down('xs')]: {\n      marginLeft: 3,\n      fontSize: 7,\n      height: 13,\n    },\n    '&> span': {\n      paddingLeft: 4,\n      paddingRight: 4,\n      [theme.breakpoints.down('xs')]: {\n        paddingLeft: 2,\n        paddingRight: 2\n      }\n    },\n    '&> span::after': {\n      content: '\"BRANCH\"',\n      [theme.breakpoints.down('xs')]: {\n          content: '\"B\"',\n      }\n    }\n  }\n});\nclass SkillCompareTable extends Component {\n\n  findGroupAndLabel(skillKey) {\n    for (let group of Object.keys(data.skills)) {\n      const foundSkill = Object.keys(data.skills[group]).find((k) => k === skillKey)\n      if (foundSkill) {\n        return {\n          group,\n          label: data.skills[group][foundSkill].label,\n        }\n      }\n    }\n  }\n\n  findBranchesFrom({extended, sk, guildGroup, gSelected }) {\n    if (!extended) return;\n    const branchesFromSk = data[guildGroup][gSelected].branching[sk];\n    const {\n      group,\n      label,\n    } = this.findGroupAndLabel(branchesFromSk);\n    return data.skills[group][branchesFromSk].label\n  }\n\n  skillsToObj({\n    guildGroup,\n    gSelected,\n    proficiency,\n    result = {},\n    extended = false,\n    gNumber = 1,\n  }) {\n    const proficiencyKey = `${extended ? 'ex': ''}${proficiency}`;\n    if (data[guildGroup] && data[guildGroup][gSelected][proficiencyKey]) {\n      data[guildGroup][gSelected][proficiencyKey].forEach(sk => {\n        const {\n          group,\n          label,\n        } = this.findGroupAndLabel(sk);\n\n        result[group] = result[group] || {};\n        result[group][sk] = {\n          [`g${gNumber}Skill`]: label,\n          [`g${gNumber}SkillLevel`]: proficiency,\n          [`g${gNumber}SkillBranchesFrom`]: this.findBranchesFrom({ extended, sk, guildGroup, gSelected }),\n          group,\n          ...result[group][sk],\n        }\n      })\n    }\n    return result;\n  }\n\n  mungeSkills() {\n    const {\n      g1Key,\n      g2Key,\n      g1Value,\n      g2Value,\n    } = this.props;\n\n    let result = {};\n    for (let proficiency of data.proficiencies) {\n      for (var i = 0; i < 2; i++) {\n        const guildGroup = `${i === 0 ? g1Key : g2Key}s`\n        const gSelected = i === 0 ? g1Value : g2Value;\n        const gNumber = i + 1;\n        for (let extended of [true, false]) {\n          result = this.skillsToObj({result, guildGroup, gSelected, proficiency, extended, gNumber})\n        }\n      }\n    }\n    return result;\n  }\n\n  render() {\n    const {\n      g1Label,\n      g2Label,\n      g1Key,\n      g2Key,\n      classes,\n    } = this.props;\n    const mungedSkills = this.mungeSkills();\n    return (\n      <Paper square elevation={3} m={3} className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>\n                {g1Label} Skills\n              </TableCell>\n              <TableCell className={classes.cell}/>\n              <TableCell className={classes.cell}>\n                {g2Label} Skills\n              </TableCell>\n              <TableCell className={classes.cell}/>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.skillGroups.map(skillGroup => (\n              <>\n                <TableRow key={skillGroup}>\n                  <TableCell className={classes.titleCell}>\n                    {skillGroup}\n                  </TableCell>\n                  <TableCell className={classes.titleCell} />\n                  <TableCell className={classes.titleCell} />\n                  <TableCell className={classes.titleCell} />\n                </TableRow>\n                {mungedSkills[skillGroup] && Object.values(mungedSkills[skillGroup]).map(row => (\n                  <TableRow key={row.id}>\n                    <TableCell\n                      className={classes.cell}\n                      style={{\n                        backgroundColor: row['g1SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\n                      }}\n                    >\n                    {\n                      row['g1SkillBranchesFrom'] && row['g1Skill']\n                      ? (\n                        <Tooltip\n                          disableFocusListener disableTouchListener \n                          title={`branches from ${row['g1SkillBranchesFrom']}`}\n                          aria-label={`branches from ${row['g1SkillBranchesFrom']}`}\n                        >\n                          <div>\n                            {row['g1Skill']}\n                          </div>\n                        </Tooltip>\n                      ) : row['g1Skill']\n                    }\n                    </TableCell>\n                    <TableCell\n                      className={classes.cell}\n                      style={{\n                        backgroundColor: row['g1SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\n                      }}\n                    >\n                    {\n                      row['g1SkillBranchesFrom']\n                      ? (\n                        <Tooltip\n                          disableFocusListener disableTouchListener \n                          title={`branches from ${row['g1SkillBranchesFrom']}`}\n                          aria-label={`branches from ${row['g1SkillBranchesFrom']}`}\n                        >\n                          <div>\n                            {row['g1SkillLevel']}\n                            {row['g1SkillBranchesFrom'] && <Chip className={classes.chip} />}\n                          </div>\n                        </Tooltip>\n                      ) : row['g1SkillLevel']\n                    }\n                    </TableCell>\n                    <TableCell\n                      className={classes.cell}\n                      style={{\n                        backgroundColor: row['g2SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\n                      }}\n                    >\n                    {\n                      row['g2SkillBranchesFrom'] && row['g2Skill']\n                      ? (\n                        <Tooltip\n                          disableFocusListener disableTouchListener \n                          title={`branches from ${row['g2SkillBranchesFrom']}`}\n                          aria-label={`branches from ${row['g2SkillBranchesFrom']}`}\n                        >\n                          <div>\n                            {row['g2Skill']}\n                          </div>\n                        </Tooltip>\n                      ) : row['g2Skill']\n                    }\n                    </TableCell>\n                    <TableCell\n                      className={classes.cell}\n                      style={{\n                        backgroundColor: row['g2SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\n                      }}\n                    >\n                    {\n                      row['g2SkillBranchesFrom']\n                      ? (\n                        <Tooltip\n                          disableFocusListener disableTouchListener \n                          title={`branches from ${row['g2SkillBranchesFrom']}`}\n                          aria-label={`branches from ${row['g2SkillBranchesFrom']}`}\n                        >\n                          <div>\n                            {row['g2SkillLevel']}\n                            {row['g2SkillBranchesFrom'] && <Chip className={classes.chip} />}\n                          </div>\n                        </Tooltip>\n                      ) : row['g2SkillLevel']\n                    }\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\nexport default withStyles(styles)(SkillCompareTable);\n\n","import React, { Component }from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport data from '../data/data.json'\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = (theme) => ({\n  cell: {\n    width: '50%',\n    [theme.breakpoints.down('xs')]: {\n      padding: 4,\n      fontSize: '0.65rem',\n      maxWidth: 65,\n      paddingRight: '4px !important'\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: 8,\n    },\n  },\n  noContent: {\n    padding: '1rem',\n    textAlign: 'center',\n    width: '100%'\n  }\n});\nclass PerkCompareTable extends Component {\n  perksToObj({\n    guildGroup,\n    gSelected,\n    gNumber = 1,\n    result = {},\n  }) {\n    if (data[guildGroup] && data[guildGroup][gSelected].perks) {\n      data[guildGroup][gSelected].perks.forEach(prk => {\n        result[prk] = {\n          [`g${gNumber}Perk`]: data.skills.perks[prk].label,\n          ...result[prk],\n        }\n      })\n    }\n    return result;\n  }\n\n  mungePerks() {\n    const {\n      g1Key,\n      g2Key,\n      g1Value,\n      g2Value,\n    } = this.props;\n\n    let result = {};\n    for (var i = 0; i < 2; i++) {\n      const guildGroup = `${i === 0 ? g1Key : g2Key}s`\n      const gSelected = i === 0 ? g1Value : g2Value;\n      const gNumber = i + 1;\n      result = this.perksToObj({result, guildGroup, gSelected, gNumber})\n    }\n    return Object.values(result);\n  }\n\n  render() {\n    const {\n      g1Label,\n      g2Label,\n      g1Key,\n      g2Key,\n      classes,\n    } = this.props;\n\n    const mungedPerks = this.mungePerks();\n    return (\n      <Paper square className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>\n                {g1Label} Perks\n              </TableCell>\n              <TableCell className={classes.cell}>\n                {g2Label} Perks\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!mungedPerks || mungedPerks.length === 0) && (\n              <TableRow key=\"noPerks\">\n                <Typography className={classes.noContent}>Neither group has perks</Typography>\n              </TableRow>\n            )}\n            {mungedPerks && mungedPerks.length > 0  && mungedPerks.map(row => (\n              <TableRow key={row.id}>\n                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\n                  {row['g1Perk']}\n                </TableCell>\n                <TableCell className={classes.cell}>{row['g2Perk']}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\nexport default withStyles(styles)(PerkCompareTable);\n\n","import React, { Component }from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport data from '../data/data.json'\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = (theme) => ({\n  cell: {\n    width: '50%',\n    [theme.breakpoints.down('xs')]: {\n      padding: 4,\n      fontSize: '0.65rem',\n      maxWidth: 65,\n      paddingRight: '4px !important'\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: 8,\n    },\n  },\n  noContent: {\n    padding: '1rem',\n    textAlign: 'center',\n    width: '100%'\n  }\n});\nclass LanguageCompareTable extends Component {\n  languagesToObj({\n    guildGroup,\n    gSelected,\n    gNumber = 1,\n    result = {},\n  }) {\n    if (data[guildGroup] && data[guildGroup][gSelected].languages) {\n      data[guildGroup][gSelected].languages.forEach(lng => {\n        result[lng] = {\n          [`g${gNumber}Language`]: data.skills.languages[lng].label,\n          ...result[lng],\n        }\n      })\n    }\n    return result;\n  }\n\n  mungeLanguages() {\n    const {\n      g1Key,\n      g2Key,\n      g1Value,\n      g2Value,\n    } = this.props;\n\n    let result = {};\n      for (var i = 0; i < 2; i++) {\n        const guildGroup = `${i === 0 ? g1Key : g2Key}s`\n        const gSelected = i === 0 ? g1Value : g2Value;\n        const gNumber = i + 1;\n        result = this.languagesToObj({result, guildGroup, gSelected, gNumber})\n    }\n    return Object.values(result);\n  }\n\n  render() {\n    const {\n      g1Label,\n      g2Label,\n      g1Key,\n      g2Key,\n      classes,\n    } = this.props;\n\n    const mungedLanguages = this.mungeLanguages();\n    return (\n      <Paper square className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>\n                {g1Label} Languages\n              </TableCell>\n              <TableCell className={classes.cell}>\n                {g2Label} Languages\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(!mungedLanguages || mungedLanguages.length === 0) && (\n              <TableRow key=\"noLanguages\">\n                <Typography className={classes.noContent}>Neither group has bonus languages</Typography>\n              </TableRow>\n            )}\n            {mungedLanguages && mungedLanguages.length > 0  && mungedLanguages.map(row => (\n              <TableRow key={row.id}>\n                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\n                  {row['g1Language']}\n                </TableCell>\n                <TableCell className={classes.cell}>{row['g2Language']}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\nexport default withStyles(styles)(LanguageCompareTable);\n\n","import React, { Component }from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport queryString from 'query-string';\nimport data from '../data/data.json'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport SkillCompareTable from './SkillCompareTable';\nimport PerkCompareTable from './PerkCompareTable';\nimport LanguageCompareTable from './LanguageCompareTable';\n\nconst styles = (theme) => ({\n  container: {\n    flexGrow: 1,\n  },\n  formControl: {\n    width: 'calc(100% - 1rem)',\n    marginRight: '1rem',\n  },\n  link: {\n    color: theme.palette.primary.main,\n  },\n});\nclass GuildPicker extends Component {\n  state = {\n    guild: 'enforcer',\n    subguild: 'hunter',\n  }\n\n  componentDidMount() {\n    const {\n      location\n    } = this.props;\n    const {\n      guild,\n      subguild\n    } = queryString.parse(location.search);\n\n    if (data.guilds[guild]) {\n      this.setState({ guild });\n    }\n    if (data.subguilds[subguild]) {\n      this.setState({ subguild });\n    }\n  }\n\n  toggleSelection = event => {\n    this.setState({ [event.target.name]: event.target.value });\n    const {\n      guild,\n      subguild\n    } = this.state;\n    const newQuery = queryString.stringify({\n      ...{\n        guild,\n        subguild,\n      },\n      [event.target.name]: event.target.value,\n    });\n    const {\n      history,\n      location: {\n        pathname = '/'\n      } = {}\n    } = this.props;\n    history.push({\n      pathname,\n      search: newQuery,\n    })\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      guild,\n      subguild,\n    } = this.state;\n    const tableConfig = {\n      g1Label: \"Guild\",\n      g2Label: \"Subguild\",\n      g1Key: \"guild\",\n      g2Key: \"subguild\",\n      g1Value: guild,\n      g2Value: subguild,\n    };\n    return (\n      <>\n        <Grid container justify=\"center\" spacing={2} className={classes.container}>\n          <Grid item xs={12} sm={6}>\n            <FormHelperText>Guild</FormHelperText>\n            <FormControl className={classes.formControl}>\n              <Select\n                value={this.state.guild}\n                onChange={this.toggleSelection}\n                inputProps={{\n                  name: 'guild',\n                  id: 'guild-select',\n                }}\n              >\n                {data.sortedguilds.map(gKey => (\n                  <MenuItem value={gKey}>\n                    {data.guilds[gKey].label}\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>\n                <span>Documentation: </span>\n                <a\n                  className={classes.link}\n                  href={data.guilds[this.state.guild].documentation}\n                  target=\"_blank\"\n                >\n                  {data.guilds[this.state.guild].documentation}\n                </a>\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormHelperText>Subguild</FormHelperText>\n            <FormControl className={classes.formControl}>\n              <Select\n                className={classes.select}\n                value={this.state.subguild}\n                onChange={this.toggleSelection}\n                inputProps={{\n                  name: 'subguild',\n                  id: 'subguild-select',\n                }}\n              >\n                {data.sortedsubguilds.map(gKey => (\n                  <MenuItem value={gKey}>\n                    {data.subguilds[gKey].label}\n                    {data.subguilds[gKey].karma ? ` (${data.subguilds[gKey].karma} karma)` : ''}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>\n                <span>Documentation: </span>\n                <a\n                  className={classes.link}\n                  href={data.subguilds[this.state.subguild].documentation}\n                  target=\"_blank\"\n                >\n                  {data.subguilds[this.state.subguild].documentation}\n                </a>\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Grid container justify=\"center\" spacing={2} className={classes.container}>\n          <Grid item xs={12} lg={6}>\n            <SkillCompareTable\n              {...tableConfig}\n            />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Grid container spacing={2} className={classes.container}>\n              <Grid item xs={12}>\n                <PerkCompareTable\n                  {...tableConfig}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <LanguageCompareTable\n                  {...tableConfig}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n}\nexport default withStyles(styles)(GuildPicker);\n","import React, { Component }from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport queryString from 'query-string';\nimport data from '../data/data.json'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport SkillCompareTable from './SkillCompareTable';\nimport PerkCompareTable from './PerkCompareTable';\nimport LanguageCompareTable from './LanguageCompareTable';\n\nconst styles = (theme) => ({\n  container: {\n    flexGrow: 1,\n  },\n  formControl: {\n    width: 'calc(100% - 1rem)',\n    marginRight: '1rem',\n  },\n  link: {\n    color: theme.palette.primary.main,\n  },\n});\nclass GuildCompare extends Component {\n  state = {\n    guild1: 'enforcer',\n    guild2: 'infiltrator',\n  }\n\n  componentDidMount() {\n    const {\n      location\n    } = this.props;\n    const {\n      guild1,\n      guild2\n    } = queryString.parse(location.search);\n\n    if (data.guilds[guild1]) {\n      this.setState({ guild1 });\n    }\n    if (data.guilds[guild2]) {\n      this.setState({ guild2 });\n    }\n  }\n\n  toggleSelection = event => {\n    this.setState({ [event.target.name]: event.target.value });\n    const {\n      guild1,\n      guild2\n    } = this.state;\n    const newQuery = queryString.stringify({\n      ...{\n        guild1,\n        guild2,\n      },\n      [event.target.name]: event.target.value,\n    });\n    const {\n      history,\n      location: {\n        pathname = '/'\n      } = {}\n    } = this.props;\n    history.push({\n      pathname,\n      search: newQuery,\n    })\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      guild1,\n      guild2,\n    } = this.state;\n    const tableConfig = {\n      g1Label: \"Guild 1\",\n      g2Label: \"Guild 2\",\n      g1Key: \"guild\",\n      g2Key: \"guild\",\n      g1Value: guild1,\n      g2Value: guild2,\n    };\n    return (\n      <>\n        <Grid container justify=\"center\" spacing={16} className={classes.container}>\n          <Grid item xs={12} sm={6}>\n            <FormHelperText>Guild 1</FormHelperText>\n            <FormControl className={classes.formControl}>\n              <Select\n                value={this.state.guild1}\n                onChange={this.toggleSelection}\n                inputProps={{\n                  name: 'guild1',\n                  id: 'guild1-select',\n                }}\n              >\n                {data.sortedguilds.map(gKey => (\n                  <MenuItem value={gKey}>\n                    {data.guilds[gKey].label}\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>\n                <span>Documentation: </span>\n                <a\n                  className={classes.link}\n                  href={data.guilds[this.state.guild1].documentation}\n                  target=\"_blank\"\n                >\n                  {data.guilds[this.state.guild1].documentation}\n                </a>\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormHelperText>Guild 2</FormHelperText>\n            <FormControl className={classes.formControl}>\n              <Select\n                className={classes.select}\n                value={this.state.guild2}\n                onChange={this.toggleSelection}\n                inputProps={{\n                  name: 'guild2',\n                  id: 'guild2-select',\n                }}\n              >\n                {data.sortedguilds.map(gKey => (\n                  <MenuItem value={gKey}>\n                    {data.guilds[gKey].label}\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>\n                <span>Documentation: </span>\n                <a\n                  className={classes.link}\n                  href={data.guilds[this.state.guild2].documentation}\n                  target=\"_blank\"\n                >\n                  {data.guilds[this.state.guild2].documentation}\n                </a>\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Grid container justify=\"center\" spacing={16} className={classes.container}>\n          <Grid item xs={12} lg={6}>\n            <SkillCompareTable\n              {...tableConfig}\n            />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Grid container spacing={16} className={classes.container}>\n              <Grid item xs={12}>\n                <PerkCompareTable\n                  {...tableConfig}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <LanguageCompareTable\n                  {...tableConfig}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n}\nexport default withStyles(styles)(GuildCompare);\n","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport data from '../data/data.json';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport { Link } from \"react-router-dom\";\n\nconst styles = (theme) => ({\n  sectionTitle: {\n    fontSize: 20,\n    padding: 6,\n  },\n  skillGroupTitle: {\n    fontSize: 18,\n    padding: 20,\n    textTransform: 'capitalize',\n  },\n  guildOptionText: {\n    padding: '0 20px',\n  },\n  guildOptionLink: {\n    color: '#ffffff5e'\n  },\n  selectedCount: {\n    color: '#ffffff5e'\n  },\n  chipContainer: {\n    padding: '0 20px'\n  },\n  chip: {\n    margin: '0 4px 4px 0',\n  },\n  clearSelected: {\n    float: 'right',\n  }\n});\nclass SkillPicker extends Component {\n  state = {\n    selectedSkills: [],\n    guilds: [],\n    subguilds: [],\n  }\n\n  componentWillMount() {\n    for (let guildGroup of ['guilds', 'subguilds']) {\n      const guilds = data[guildGroup] ? Object.keys(data[guildGroup]) : [];\n      const result = [];\n      for (let guild of guilds) {\n        result.push({\n          key: guild,\n          label: data[guildGroup][guild].label,\n          skills: this.flattenGuild(guildGroup, guild),\n          perks: data[guildGroup][guild].perks,\n          karma: data[guildGroup][guild].karma,\n        });\n      }\n      this.setState({\n        [guildGroup]: result\n      })\n    }\n  }\n\n  flattenGuild = (guildGroup, guild) => {\n    let result = [];\n    for (let skillPrefix of ['', 'ex']) {\n      for (let profLevel of ['languages', ...data.proficiencies]) {\n        if (data[guildGroup][guild][`${skillPrefix}${profLevel}`]) {\n          result = [...data[guildGroup][guild][`${skillPrefix}${profLevel}`], ...result]\n        }\n      }\n    }\n    return result;\n  }\n\n  toggleSelection = (event, skill) => {\n    const {\n      selectedSkills\n    } = this.state;\n\n    const itemIndex = selectedSkills.indexOf(skill)\n    if (itemIndex === -1) {\n      this.setState({ selectedSkills: [skill, ...selectedSkills]})\n    } else {\n      selectedSkills.splice(itemIndex, 1);\n      this.setState({ selectedSkills: [...selectedSkills]})\n    }\n  }\n\n  clearSelection = () => {\n    this.setState({ selectedSkills: [] })\n  }\n\n  findGuildsForSkills = () => {\n    const result = [];\n    for (let guild of this.state.guilds) {\n      for (let subguild of this.state.subguilds) {\n        let skillsMatched = 0;\n        for (let skill of this.state.selectedSkills) {\n          if (\n            guild.skills.includes(skill)\n            || subguild.skills.includes(skill)\n            || guild.perks.includes(skill)\n            || subguild.perks.includes(skill)\n          ) {\n            skillsMatched++;\n          }\n        }\n\n        if (skillsMatched === this.state.selectedSkills.length) {\n          const karmaLabel = (guild.karma || subguild.karma) ? ` (${guild.karma + subguild.karma})` : '';\n          result.push({\n            label: `${guild.label}/${subguild.label}${karmaLabel}`,\n            linkTo: `/arma-guild-picker/?guild=${guild.key}&subguild=${subguild.key}`\n          })\n        }\n      }\n    }\n    return result;\n  }\n\n  render () {\n    const {\n      classes,\n    } = this.props;\n    const {\n      selectedSkills,\n    } = this.state;\n    return (\n      <Grid container justify=\"center\" spacing={2} className={classes.container}>\n        <Grid item xs={12} sm={6}>\n          <Paper square>\n            <Grid container>\n              <Grid item xs={12} sm={6}>\n                <Typography className={classes.sectionTitle}>\n                  Skills\n                  {' '}\n                  <span className={classes.selectedCount}>({selectedSkills.length} selected)</span>\n                </Typography>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                {selectedSkills.length > 0 && (<Button\n                  size=\"small\"\n                  className={classes.clearSelected}\n                  onClick={() => this.clearSelection()}\n                >\n                  Clear\n                </Button>)}\n              </Grid>\n              </Grid>\n            {['languages', 'perks', ...data.skillGroups].map(skillGroup => (\n              <>\n                <Typography className={classes.skillGroupTitle}>{skillGroup}</Typography>\n                <div className={classes.chipContainer}>\n                  {Object.keys(data.skills[skillGroup]).map((key) => (\n                    <Chip\n                      className={classes.chip}\n                      onClick={(event) => this.toggleSelection(event, key)}\n                      label={data.skills[skillGroup][key].label}\n                      color={selectedSkills.includes(key) ? 'primary' : ''}\n                    />\n                  ))}\n                </div>\n              </>\n            ))}\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper square>\n            <Typography className={classes.sectionTitle}>\n              Matching Guild\n              {' '}\n              <span className={classes.selectedCount}>(Click to View in Guild Picker)</span>\n            </Typography>\n            <Grid container justify=\"center\" spacing={2} className={classes.container}>\n              {this.findGuildsForSkills().map(guildCombination => (\n                <Grid item xs={12} sm={6} className={classes.guildOption}>\n                  <Link to={guildCombination.linkTo} className={classes.guildOptionLink}>\n                    <Typography className={classes.guildOptionText}>\n                      {guildCombination.label}\n                    </Typography>\n                  </Link>\n                </Grid>\n              ))}\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(SkillPicker);\n","const theme = {\n  \"palette\": {\n    \"type\": \"dark\",\n    \"primary\": {\n      \"main\": \"#d84315\",\n      \"contrastText\": \"rgba(0, 0, 0, 0.87)\"\n    },\n    \"secondary\": {\n      \"main\": \"#5d4037\"\n    },\n    \"primary1Color\": \"#d84315\",\n    \"primary2Color\": \"#5d4037\",\n    \"accent1Color\": \"#eeeeee\",\n    \"accent2Color\": \"rgba(255, 236, 179, 0.3)\",\n    \"accent3Color\": \"#ff8f00\"\n  },\n  \"tabs\": {\n    \"backgroundColor\": \"#e64a19\",\n    \"textColor\": \"rgba(33, 33, 33, 0.54)\"\n  },\n  \"tableRow\": {\n    \"selectedColor\": \"rgba(255, 255, 255, 0.1)\",\n    \"hoverColor\": \"rgba(255, 236, 179, 0.15)\"\n  },\n  \"toggle\": {\n    \"thumbOffColor\": \"rgba(255, 236, 179, 0.51)\",\n    \"labelDisabledColor\": \"rgba(255, 255, 255, 0.29)\",\n    \"thumbDisabledColor\": \"rgba(255, 255, 255, 0.48)\"\n  }\n};\nexport default theme;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Layout from './components/Layout'\nimport GuildPicker from './components/GuildPicker'\nimport GuildCompare from './components/GuildCompare'\nimport SkillPicker from './components/SkillPicker'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport themeOverrides from './theme.js';\nconst theme = createMuiTheme(themeOverrides);\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Router>\n        <Layout>\n          <Route path=\"/arma-guild-picker/\" exact component={GuildPicker} />\n          <Route path=\"/arma-guild-picker/guild-picker/\" component={GuildPicker} />\n          <Route path=\"/arma-guild-picker/guild-compare/\" component={GuildCompare} />\n          <Route path=\"/arma-guild-picker/skill-picker/\" component={SkillPicker} />\n        </Layout>\n      </Router>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}